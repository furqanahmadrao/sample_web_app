name: Claude Code with Custom App

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # NEW: Generate token from custom GitHub App
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Setup Claude Code Router Config
        run: |
          mkdir -p $HOME/.claude-code-router
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "log": true,
            "log_level": "info",
            "NON_INTERACTIVE_MODE": true,
            "API_TIMEOUT_MS": 600000,
            "Providers": [
              {
                "name": "openrouter",
                "api_base_url": "https://openrouter.ai/api/v1/chat/completions",
                "api_key": "$OPENROUTER_API_KEY",
                "models": [
                  "x-ai/grok-4-fast:free"
                ],
                "transformer": {
                  "use": ["openrouter"]
                }
              }
            ],
            "Router": {
              "default": "openrouter,x-ai/grok-4-fast:free"
            }
          }
          EOF
          echo "✅ Router config written"
        shell: bash
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Start Claude Code Router
        run: |
          curl -fsSL https://bun.sh/install | bash
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@1.0.8 start &

          # Wait until router is ready (up to 10s)
          for i in {1..10}; do
            if curl -fs http://localhost:3456/health; then
              echo "✅ Router is healthy"
              break
            fi
            sleep 1
          done
        shell: bash
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      # UPDATED: Use custom app token
      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        with:
          anthropic_api_key: "router-managed"
          github_token: ${{ steps.app-token.outputs.token }}  # <-- Custom app token
          additional_permissions: |
            actions: read

      - name: Usage Report
        if: always()
        run: |
          echo "=== Model Usage ==="
          echo "✅ Using OpenRouter Grok-4-Free"
          echo "💰 Cost: $0.00 per request (free tier)"
          echo "🤖 GitHub App: Custom app authenticated"
        continue-on-error: true

      - name: Debug on Failure
        if: failure()
        run: |
          echo "=== App Token Status ==="
          if [ -n "${{ steps.app-token.outputs.token }}" ]; then
            echo "✅ App token generated successfully"
          else
            echo "❌ App token generation failed"
          fi
          echo "=== Router Logs ==="
          tail -n 50 $HOME/.claude-code-router/logs/ccr-*.log 2>/dev/null || echo "No logs found"
          echo "=== Service Check ==="
          ps aux | grep claude-code-router || echo "Router not running"

      - name: Stop Router (Cleanup)
        if: always()
        run: pkill -f claude-code-router || true
