name: Claude Code with Rotating API Keys
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Claude Code Router
        run: |
          # Install bun
          curl -fsSL https://bun.sh/install | bash
          
          # Create router directory
          mkdir -p $HOME/.claude-code-router
          
          # Create custom router that rotates API keys
          cat << 'EOF' > $HOME/.claude-code-router/custom-router.js
          // Simple per-call API key rotation
          let callCounter = 0;
          
          module.exports = async function router(req, config) {
            callCounter++;
            
            // Rotate through 4 providers (0,1,2,3)
            const providerIndex = (callCounter - 1) % 4;
            const providerName = `gemini-key-${providerIndex + 1}`;
            
            console.log(`[API Call #${callCounter}] → Using ${providerName}`);
            
            // Return provider and model
            return `${providerName},gemini-2.5-flash`;
          };
          EOF
          
          # Create config with 4 providers (same model, different keys)
          cat << 'EOF' > $HOME/.claude-code-router/config.json
          {
            "LOG": true,
            "LOG_LEVEL": "info",
            "NON_INTERACTIVE_MODE": true,
            "API_TIMEOUT_MS": 600000,
            "CUSTOM_ROUTER_PATH": "/home/runner/.claude-code-router/custom-router.js",
            "Providers": [
              {
                "name": "gemini-key-1",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "$GEMINI_API_KEY_1",
                "models": ["gemini-2.5-flash"],
                "transformer": {
                  "use": ["gemini"]
                }
              },
              {
                "name": "gemini-key-2",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "$GEMINI_API_KEY_2",
                "models": ["gemini-2.5-flash"],
                "transformer": {
                  "use": ["gemini"]
                }
              },
              {
                "name": "gemini-key-3",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "$GEMINI_API_KEY_3",
                "models": ["gemini-2.5-flash"],
                "transformer": {
                  "use": ["gemini"]
                }
              },
              {
                "name": "gemini-key-4",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "$GEMINI_API_KEY_4",
                "models": ["gemini-2.5-flash"],
                "transformer": {
                  "use": ["gemini"]
                }
              }
            ]
          }
          EOF
          
          echo "✅ Setup complete!"
          echo "🔄 Rotation pattern: Call 1→Key1, Call 2→Key2, Call 3→Key3, Call 4→Key4, Call 5→Key1..."
        shell: bash
        env:
          GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
          GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
          GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
          GEMINI_API_KEY_4: ${{ secrets.GEMINI_API_KEY_4 }}

      - name: Start Router Service
        run: |
          # Start the router
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@latest start &
          
          sleep 5
          
          # Verify it's running
          if curl -f http://localhost:3456/health 2>/dev/null; then
            echo "✅ Router is running"
            echo "📊 Each API call will use a different key in rotation"
          else
            echo "⚠️ Router may still be starting..."
          fi
        shell: bash
        env:
          GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
          GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
          GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
          GEMINI_API_KEY_4: ${{ secrets.GEMINI_API_KEY_4 }}

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
        with:
          anthropic_api_key: "router-managed"
          additional_permissions: |
            actions: read

      - name: Show Rotation Stats
        if: always()
        run: |
          echo "📊 API Key Rotation Report"
          echo "=========================="
          
          # Count calls per key from logs
          LOG_FILE=$(ls $HOME/.claude-code-router/logs/ccr-*.log 2>/dev/null | head -1)
          
          if [ -f "$LOG_FILE" ]; then
            echo "Calls per API key:"
            echo "  Key 1: $(grep "gemini-key-1" $LOG_FILE | wc -l) calls"
            echo "  Key 2: $(grep "gemini-key-2" $LOG_FILE | wc -l) calls"
            echo "  Key 3: $(grep "gemini-key-3" $LOG_FILE | wc -l) calls"
            echo "  Key 4: $(grep "gemini-key-4" $LOG_FILE | wc -l) calls"
            
            echo ""
            echo "Last 10 API calls:"
            grep "Using gemini-key" $LOG_FILE | tail -10
          fi
        continue-on-error: true
